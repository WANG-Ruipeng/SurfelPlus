#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_KHR_vulkan_glsl : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};


#include "globals.glsl"

PtPayload        prd;
ShadowHitPayload shadow_payload;

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "traceray_rq.glsl"

#include "pathtrace.glsl"

#define FIREFLIES 1

layout(set = 4, binding = 0) uniform usampler2D gbufferPrim;
layout(set = 4, binding = 1) uniform usampler2D gbufferNormal;
layout(set = 4, binding = 2) uniform sampler2D gbufferDepth;

layout(set = 5, binding = 0) uniform image2D reflectionColor;
layout(set = 5, binding = 1) uniform image2D reflectionDirection;
layout(set = 5, binding = 2) uniform image2D reflectionPointBrdf;
layout(set = 5, binding = 3) uniform image2D filteredReflectionColor;
layout(set = 5, binding = 4) uniform image2D bilateralCleanupColor;

// surfel buffers
layout(set = 6, binding = 0,  scalar)		buffer _SurfelCounter		{ SurfelCounter surfelCounter; };
layout(set = 6, binding = 1,  scalar)		buffer _SurfelBuffer		{ Surfel surfelBuffer[]; };
layout(set = 6, binding = 2,  scalar)		buffer _SurfelAlive		    { uint surfelAlive[]; };
layout(set = 6, binding = 3,  scalar)		buffer _SurfelDead		    { uint surfelDead[]; };
layout(set = 6, binding = 4,  scalar)		buffer _SurfelDirty		    { uint surfelDirty[]; };
layout(set = 6, binding = 5,  scalar)		buffer _SurfelRecycle		{ SurfelRecycleInfo surfelRecycleInfo[]; };
layout(set = 6, binding = 6,  scalar)		buffer _SurfelRayBuffer		{ SurfelRay surfelRayBuffer[]; };

// cell buffer
layout(set = 7, binding = 0,  scalar)		buffer _CellBuffer			{ CellInfo cellBuffer[]; };
layout(set = 7, binding = 1,  scalar)		buffer _CellCounter			{ CellCounter cellCounter; };
layout(set = 7, binding = 2,  scalar)		buffer _CellToSurfel		{ uint cellToSurfel[]; };

#include "shaderUtils_surfel_cell.glsl"
#include "shaderUtils.glsl"

uint randSeed;

struct Resevior
{
    BsdfSampleRec outSample;
    float weightSum;
};

void addSample(inout Resevior resevior, in BsdfSampleRec candidate, float weight)
{
    resevior.weightSum += weight;
	if (rand(randSeed) < weight / resevior.weightSum)
	{
		resevior.outSample = candidate;
	}
}

float pHat(in BsdfSampleRec candidate)
{
	return length(candidate.f);
}

// only sample specular lobe
vec3 SpecSample(in State state, vec3 V, vec3 N, inout vec3 L, inout float pdf, inout RngStateType seed)
{
  pdf       = 0.0;
  vec3 brdf = vec3(0.0);

  float probability   = rand(seed);
  float diffuseRatio  = 0.5 * (1.0 - state.mat.metallic);
  float specularRatio = 1.0 - diffuseRatio;
  float transWeight   = 0.f;

  float r1 = rand(seed);
  float r2 = rand(seed);

  {
    // Anything less than 2% is physically impossible and is instead considered to be shadowing. Compare to "Real-Time-Rendering" 4th editon on page 325.
    vec3  specularCol = state.mat.f0;
    float reflectance = max(max(specularCol.r, specularCol.g), specularCol.b);
    vec3  f0          = specularCol.rgb;
    vec3  f90         = vec3(clamp(reflectance * 50.0, 0.0, 1.0));

    vec3 T = state.tangent;
    vec3 B = state.bitangent;

    float primarySpecRatio = 1.0 / (1.0 + state.mat.clearcoat);
    float roughness;
    if(rand(seed) < primarySpecRatio)
      roughness = state.mat.roughness;
    else
      roughness = state.mat.clearcoatRoughness;

    vec3 H = GgxSampling(roughness, r1, r2);
    H      = T * H.x + B * H.y + N * H.z;
    L      = reflect(-V, H);


    // Sample primary specular lobe
    if(rand(seed) < primarySpecRatio)
    {
      // Specular
      brdf = EvalSpecularGltf(state, f0, f90, V, N, L, H, pdf);
      pdf *= primarySpecRatio * specularRatio;  //*(1 - clearcoat * clearcoatFresnel)
    }
    else
    {
      // Clearcoat
      brdf = EvalClearcoatGltf(state, V, N, L, H, pdf);
      pdf *= (1.0 - primarySpecRatio) * specularRatio;
    }

  }

  return brdf;
}

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;


void main()
{
	ivec2 imageRes    = rtxState.size / 2;
	ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (vec2(imageCoords) + vec2(0.5f)) / vec2(imageRes);

	if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
	{
		return;
	}

    randSeed = initRandom(imageRes, imageCoords, lowbias32(rtxState.totalFrames));
    vec2 stocasticUV = uv + vec2(rand(randSeed) - 0.5, rand(randSeed) - 0.5) / vec2(imageRes);

    prd.seed = tea(rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, rtxState.totalFrames * rtxState.maxSamples);

    // path trace solution
//    vec2       d           = stocasticUV * 2.0 - 1.0;
//
//    vec4 origin    = sceneCamera.viewInverse * vec4(0, 0, 0, 1);
//    vec4 target    = sceneCamera.projInverse * vec4(d.x, d.y, 1, 1);
//    vec4 direction = sceneCamera.viewInverse * vec4(normalize(target.xyz), 0);
//    Ray ray = Ray(origin.xyz, direction.xyz);
//
//    float firstDepth = -1.f;
//    BsdfSampleRec reflectBsdfSampleRec;
//    float weight;
//
//    vec3 radiance = surfelRefelctionTrace(ray, 2, firstDepth, reflectBsdfSampleRec, weight);
//    if (firstDepth == INFINITY)
//    {
//    	imageStore(reflectionColor, imageCoords, vec4(0.0));
//		imageStore(reflectionDirection, imageCoords, vec4(0.0));
//		return;
//	}
//    float lum = dot(radiance, vec3(0.212671f, 0.715160f, 0.072169f));
//    if(lum > rtxState.fireflyClampThreshold)
//    {
//      radiance *= rtxState.fireflyClampThreshold / lum;
//    }
//    float invPdf = 1.f / reflectBsdfSampleRec.pdf;
//    //radiance *= invPdf * reflectBsdfSampleRec.f * max(0.0, dot(reflectBsdfSampleRec.L, state.normal));
//
//    imageStore(reflectionColor, imageCoords, vec4(radiance, weight));
//    imageStore(reflectionDirection, imageCoords, vec4(reflectBsdfSampleRec.L, invPdf));



    ivec2 gbufferCoords = ivec2(imageCoords * 2);
	uint primObjID = texelFetch(gbufferPrim, gbufferCoords, 0).r;

    // reconstruct world position from depth
    float depth = texelFetch(gbufferDepth, gbufferCoords, 0).r;
    if (depth == 1.0)
	{
        imageStore(reflectionColor, imageCoords, vec4(0.0));
        imageStore(reflectionDirection, imageCoords, vec4(0.0));
		return;
	}

    vec3 worldPos = WorldPosFromDepth(stocasticUV, depth);

    uint nodeID = primObjID >> 23;
    uint instanceID = sceneNodes[nodeID].primMesh;
    mat4 worldMat = sceneNodes[nodeID].worldMatrix;
    uint primID = primObjID & 0x007FFFFF;
    InstanceData pinfo = geoInfo[instanceID];

    // camera ray
    vec3 camPos = (sceneCamera.viewInverse * vec4(0, 0, 0, 1)).xyz;
    Ray camRay = Ray(camPos, normalize(worldPos - camPos));

    // decompress normal
    vec3 normal = decompress_unit_vec(texelFetch(gbufferNormal, gbufferCoords, 0).r);

    // reflected direction and brdf
    State state = GetState(primObjID, normal, depth, uv);
    // ignore rough surface
    if (state.mat.roughness > 0.95)
	{
		imageStore(reflectionColor, imageCoords, vec4(0.0));
		imageStore(reflectionDirection, imageCoords, vec4(0.0));
		return;
	}

    Resevior resevior;
    resevior.weightSum = 0.f;
    resevior.outSample.pdf = 0.f;
    resevior.outSample.f = vec3(0.f);
    resevior.outSample.L = vec3(0.f);

    BsdfSampleRec reflectBsdfSampleRec;
    int numCandidates = 16;
    float candInv = 1.f / float(numCandidates);
    float weight = 0.0;
    uint maxItr = 0;

    for (int i = 0; i < numCandidates; ++i)
    {
        reflectBsdfSampleRec.f = SpecSample(state, -camRay.direction, state.ffnormal, reflectBsdfSampleRec.L, reflectBsdfSampleRec.pdf, prd.seed);
        if (reflectBsdfSampleRec.pdf < 1e-5)
            continue;
		weight = candInv * pHat(reflectBsdfSampleRec) / reflectBsdfSampleRec.pdf;
        if (weight < 1e-5)
			continue;
		addSample(resevior, reflectBsdfSampleRec, weight);
    }

    reflectBsdfSampleRec = resevior.outSample;
    weight = pHat(reflectBsdfSampleRec);

    if (weight < 1e-5 || reflectBsdfSampleRec.pdf < 1e-5)
    {
        imageStore(reflectionColor, imageCoords, vec4(0.0));
		imageStore(reflectionDirection, imageCoords, vec4(vec3(state.matID + 1), 0.0));
		return;
    }

    float invPdf = resevior.weightSum / weight;


//    while(weight < 1e-5 && maxItr < 3)
//    {
//        reflectBsdfSampleRec.f = SpecSample(state, -camRay.direction, state.ffnormal, reflectBsdfSampleRec.L, reflectBsdfSampleRec.pdf, prd.seed);
//        // calculate brdf weight
//        weight = brdfWeight(-camRay.direction, state.ffnormal, reflectBsdfSampleRec.L, state.mat.roughness);
//        reflectBsdfSampleRec.pdf = max(1e-4, reflectBsdfSampleRec.pdf);
//        maxItr++;
//    }

    // reflection color
    Ray reflectedRay = Ray(worldPos + 1e-2 * normal, normalize(reflectBsdfSampleRec.L));

    float firstDepth = -1.f;
    BsdfSampleRec tmp;
    vec3 radiance = surfelRefelctionTrace(reflectedRay, 1, firstDepth, tmp, weight);
    //float invPdf = 1.f / reflectBsdfSampleRec.pdf;
    radiance *= invPdf * reflectBsdfSampleRec.f * max(0.0, dot(reflectBsdfSampleRec.L, state.ffnormal));
    float lum = dot(radiance, vec3(0.212671f, 0.715160f, 0.072169f));
    if(lum > rtxState.fireflyClampThreshold)
    {
      radiance *= rtxState.fireflyClampThreshold / lum;
    }

    imageStore(reflectionColor, imageCoords, vec4(radiance, weight));
    imageStore(reflectionDirection, imageCoords, vec4(vec3(state.matID + 1), invPdf));


    //ClosestHit(reflectedRay);


//    if(prd.hitT == INFINITY)
//    {
//        vec3 env;
//
//        if(_sunAndSky.in_use == 1)
//            env = sun_and_sky(_sunAndSky, reflectedRay.direction);
//        else
//        {
//            vec2 uv = GetSphericalUv(reflectedRay.direction);  // See sampling.glsl
//            env     = texture(environmentTexture, uv).rgb;
//        }
//
//	    imageStore(reflectionColor, imageCoords, vec4(env, weight));
//        imageStore(reflectionDirection, imageCoords, vec4(reflectBsdfSampleRec.L, 1.f / reflectBsdfSampleRec.pdf));
//        
//    }
//    else
//    {
//
//        // Get Position, Normal, Tangents, Texture Coordinates, Color
//        ShadeState sstate = GetShadeState(prd);
//
//        State state;
//        state.position       = sstate.position;
//        state.normal         = sstate.normal;
//        state.tangent        = sstate.tangent_u[0];
//        state.bitangent      = sstate.tangent_v[0];
//        state.texCoord       = sstate.text_coords[0];
//        state.matID          = sstate.matIndex;
//        state.isEmitter      = false;
//        state.specularBounce = false;
//        state.isSubsurface   = false;
//        state.ffnormal       = dot(state.normal, reflectedRay.direction) <= 0.0 ? state.normal : -state.normal;
//
//        // Filling material structures
//        GetMaterialsAndTextures(state, reflectedRay);
//
//        // Color at vertices
//        state.mat.albedo *= sstate.color;
//
//        imageStore(reflectionColor, imageCoords, vec4(state.mat.albedo, weight));
//        imageStore(reflectionDirection, imageCoords, vec4(reflectBsdfSampleRec.L, 1.f / reflectBsdfSampleRec.pdf));
//    }

    //imageStore(reflectionPointBrdf, imageCoords, vec4(reflectBsdfSampleRec.f, 1.f));

}