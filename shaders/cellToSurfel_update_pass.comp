#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters
#extension GL_EXT_debug_printf : enable                 // Debug - printf
#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "host_device.h"
#include "compress.glsl"

// surfel buffers
layout(set = 0, binding = 0,  scalar)		buffer _SurfelCounter		{ SurfelCounter surfelCounter; };
layout(set = 0, binding = 1,  scalar)		buffer _SurfelBuffer		{ Surfel surfelBuffer[]; };
layout(set = 0, binding = 2,  scalar)		buffer _SurfelAlive		    { uint surfelAlive[]; };
layout(set = 0, binding = 3,  scalar)		buffer _SurfelDead		    { uint surfelDead[]; };
layout(set = 0, binding = 4,  scalar)		buffer _SurfelDirty		    { uint surfelDirty[]; };
layout(set = 0, binding = 5,  scalar)		buffer _SurfelRecycle		{ SurfelRecycleInfo surfelRecycleInfo[]; };
layout(set = 0, binding = 6,  scalar)		buffer _SurfelRayBuffer		{ SurfelRay surfelRayBuffer[]; };

// cell buffer
layout(set = 1, binding = 0, scalar)		buffer _CellBuffer			{ CellInfo cellBuffer[]; };
layout(set = 1, binding = 1,  scalar)		buffer _CellCounter			{ CellCounter cellCounter; };
layout(set = 1, binding = 2,  scalar)		buffer _CellToSurfel		{ uint cellToSurfel[]; };

// scene buffers
layout(set = 2, binding = 0,  scalar)		uniform _SceneCamera		{ SceneCamera sceneCamera; };

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "shaderUtils_surfel_cell.glsl"

// Compute input
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    // Update _CellToSurfel buffer
    if(idx > surfelCounter.aliveSurfelCnt) return;

    //Get the surfel cell position to process
    uint surfelIndex = surfelAlive[idx];
    Surfel surfel = surfelBuffer[surfelIndex];
    vec3 camPos = getCameraPosition(sceneCamera);
    // vec3 cellPosIndex = getCellPos(surfel.position,camPos);
    ivec4 cellPosIndex = getCellPosNonUniform(surfel.position, camPos);

    for(uint i = 0; i < 27; i++){
        //iterate through 3x3x3 cell neighbours
        //vec3 neighbourPos = cellPosIndex + neighborOffset[i];
        vec3 neighbourPos3 = cellPosIndex.xyz + neighborOffset[i];
		ivec4 neighbourPos = ivec4(neighbourPos3, cellPosIndex.w);

        if (isSurfelIntersectCell(surfel, neighbourPos3, camPos)){
            //uint flattenIndex = getFlattenCellIndex(neighbourPos);
            uint flattenIndex = getFlattenCellIndexNonUniform(neighbourPos);
            uint prevCount = atomicAdd(cellBuffer[flattenIndex].surfelCount, 1);
            cellToSurfel[cellBuffer[flattenIndex].surfelOffset + prevCount] = surfelIndex;
            //debugPrintfEXT("%d\n", cellBuffer[flattenIndex].surfelCount);
        }
    }

   
}