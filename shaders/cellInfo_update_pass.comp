#version 460

#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters
#extension GL_EXT_debug_printf : enable                 // Debug - printf
#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "host_device.h"

// surfel buffers
layout(set = 0, binding = 0,  scalar)		buffer _SurfelCounter		{ SurfelCounter surfelCounter; };
layout(set = 0, binding = 1,  scalar)		buffer _SurfelBuffer		{ Surfel surfelBuffer[]; };
layout(set = 0, binding = 2,  scalar)		buffer _SurfelAlive		    { uint surfelAlive[]; };
layout(set = 0, binding = 3,  scalar)		buffer _SurfelDead		    { uint surfelDead[]; };
layout(set = 0, binding = 4,  scalar)		buffer _SurfelDirty		    { uint surfelDirty[]; };
layout(set = 0, binding = 5,  scalar)		buffer _SurfelRecycle		{ SurfelRecycleInfo surfelRecycleInfo[]; };
layout(set = 0, binding = 6,  scalar)		buffer _SurfelRayBuffer		{ SurfelRay surfelRayBuffer[]; };

// cell buffer
layout(set = 1, binding = 0, scalar)		buffer _CellBuffer			{ CellInfo cellBuffer[]; };
layout(set = 1, binding = 1,  scalar)		buffer _CellCounter			{ CellCounter cellCounter; };
layout(set = 1, binding = 2,  scalar)		buffer _CellToSurfel		{ uint cellToSurfel[]; };

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

// Compute input
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

#include "compress.glsl"
#include "shaderUtils_surfel_cell.glsl"

void main()
{
	uint idx = gl_GlobalInvocationID.x;

	// Compute offset of the cell to surfel buffer
	// Cell Count
	if(idx >= kCellCount) return;

	// Get the cell to process
	CellInfo thisCell = cellBuffer[idx];
	if (thisCell.surfelCount == 0) return;

	//if(thisCell.surfelOffset != 0 &&  thisCell.surfelCount != 0) 
		//debugPrintfEXT("surfelOffset:%d, surfelCount:%d\n", thisCell.surfelOffset, thisCell.surfelCount); 
	// Calculate offsets of the surfel buffer
	uint offset = atomicAdd(cellCounter.aliveSurfelInCell, thisCell.surfelCount);
	//if(idx == 40) debugPrintfEXT("surfelOffset:%d, surfelCount:%d\n", thisCell.surfelOffset, thisCell.surfelCount); 

	cellBuffer[idx].surfelOffset = offset;
	cellBuffer[idx].surfelCount = 0;
	
}