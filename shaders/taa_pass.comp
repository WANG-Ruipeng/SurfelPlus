
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_KHR_vulkan_glsl : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};



layout(set = 0, binding = 4) uniform image2D bilateralCleanupColor;
layout(set = 0, binding = 9) uniform sampler2D bilateralCleanupColorSampler;

layout(set = 1, binding = 2) uniform sampler2D gbufferDepth;
layout(set = 2, binding = eCamera,	scalar)		uniform _SceneCamera	{ SceneCamera sceneCamera; };

layout(set = 3, binding = 0) uniform image2D TAAColor1;
layout(set = 3, binding = 1) uniform image2D TAAColor2;
layout(set = 3, binding = 2) uniform sampler2D TAASampler1;
layout(set = 3, binding = 3) uniform sampler2D TAASampler2;

layout(set = 4, binding = 0) uniform sampler2D inImage;

#include "globals.glsl"
#include "shaderUtils.glsl"

#define sample_PrevTAASampler(col, uv) if (rtxState.frame % 2 == 0) { col = texture(TAASampler1, uv).rgb; } else { col = texture(TAASampler2, uv).rgb; }
#define store_outTAAImage(col, imageCoords) if (rtxState.frame % 2 == 0) { imageStore(TAAColor2, imageCoords, col); } else { imageStore(TAAColor1, imageCoords, col); }

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    ivec2 imageRes = rtxState.size; 
    ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);

    if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
        return; 


	vec2 texSize = vec2(textureSize(inImage, 0));

	vec2 uvCoords = (vec2(imageCoords) + vec2(0.5)) / texSize;

	float depth = texelFetch(gbufferDepth, imageCoords, 0).r;
	vec2 closestCoords = ivec2(0, 0);

	vec3 max33 = vec3(0.0);
	vec3 min33 = vec3(1.0);
	vec3 maxCross = vec3(0.0);
	vec3 minCross = vec3(1.0);

    // read 3x3 surrounding pixel, find closest depth pixel and color aabb for 3x3 pixelx and "+" shaped pixels
    for (int i = -1; i <= 1; i++)
	{
		for (int j = -1; j <= 1; j++)
		{
			vec2 neighborCoords = uvCoords + vec2(i, j) / texSize;
			if (neighborCoords.x < 0 || neighborCoords.x >= 1.0 || neighborCoords.y < 0 || neighborCoords.y >= 1.0 || (i == 0 && j == 0))
				continue;

			vec3 neighborColor = texture(inImage, neighborCoords).rgb;

			// 3x3
			max33 = max(max33, neighborColor.rgb);
			min33 = min(min33, neighborColor.rgb);

			// cross
			if ((i == 0 && (j == -1 || j == 1)) || (j == 0 && (i == -1 || i == 1)))
			{
				maxCross = max(maxCross, neighborColor.rgb);
				minCross = min(minCross, neighborColor.rgb);
			}

			float neighborDepth = texelFetch(gbufferDepth, imageCoords + ivec2(i, j), 0).r;
			if (neighborDepth < depth)
			{
//				depth = neighborDepth;
				closestCoords = neighborCoords;
			}
		}
	}

	// blend 33 and cross
	vec3 aabb_max = 0.36 * max33 + 0.64 * maxCross;
	vec3 aabb_min = 0.36 * min33 + 0.64 * minCross;

	// reconstruct world pos from depth 
	vec3 worldPos = WorldPosFromDepth(uvCoords, depth);

	// current color
	vec3 currentCol = texture(inImage, uvCoords).rgb;

	// prev uv pos 
	vec4 prevClip = sceneCamera.prevViewProj * vec4(worldPos, 1.0);
	prevClip /= prevClip.w;
	vec2 prevUV = prevClip.xy * 0.5 + 0.5;

	vec3 prevCol;
	if (prevUV .x < 0 || prevUV.x >= 1.0 || prevUV.y < 0 || prevUV.y >= 1.0)
		prevCol = currentCol;
	else
		sample_PrevTAASampler(prevCol, prevUV);


	// unjittered color
	vec2 unJitteredUV = uvCoords - sceneCamera.jitter.xy;

	vec3 unJitteredCol;
	if (unJitteredUV.x < 0 || unJitteredUV.x >= 1.0 || unJitteredUV.y < 0 || unJitteredUV.y >= 1.0)
		unJitteredCol = currentCol;
	else unJitteredCol = texture(inImage, unJitteredUV).rgb;

	// line box clipping
	vec3 p_clip = 0.5 * (aabb_max + aabb_min);
	vec3 e_clip = 0.5 * (aabb_max - aabb_min);
	vec3 v_clip = prevCol - vec3(p_clip);
	vec3 v_unit = v_clip.xyz / e_clip;
	vec3 a_unit = abs(v_unit);
	float ma_unit = max(a_unit.x, max(a_unit.y,
	a_unit.z));
	vec3 col_clipped = ma_unit > 1.0 ? vec3(p_clip) + v_clip / ma_unit : prevCol;

	// final blend
	vec3 finalColor = mix(unJitteredCol, col_clipped, 0.95);

	store_outTAAImage(vec4(rtxState.frame == 0 ? currentCol : finalColor, 1.0), imageCoords);
//	imageStore(bilateralCleanupColor, imageCoords, vec4(finalColor, 1.0));
	



}