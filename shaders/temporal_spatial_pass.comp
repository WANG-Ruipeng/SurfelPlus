#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_KHR_vulkan_glsl : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "globals.glsl"

layout(set = 0, binding = 0) uniform image2D reflectionColor;
layout(set = 0, binding = 1) uniform image2D reflectionDirection;
layout(set = 0, binding = 2) uniform image2D reflectionPointBrdf;
layout(set = 0, binding = 3) uniform image2D filteredReflectionColor;

const ivec2 samplePattern[4][16] = ivec2[4][16](
	ivec2[16](
        ivec2(-4, 0),
        ivec2(-4, 1),
        ivec2(-3, -2),
        ivec2(-3, 3),
        ivec2(-2, 2),
        ivec2(-1, -4),
        ivec2(-1, -2),
        ivec2(-1, 4),
        ivec2(0, -1),
        ivec2(0, 1),
        ivec2(1, -2),
        ivec2(1, 2),
        ivec2(2, -2),
        ivec2(3, -1),
        ivec2(3, 1),
        ivec2(3, 3)),
    ivec2[16](
        ivec2(-3, -3),
        ivec2(-3, 0),
        ivec2(-3, 2),
        ivec2(-2, -1),
        ivec2(-2, 0),
        ivec2(-1, -3),
        ivec2(-1, 2),
        ivec2(0, 0),
        ivec2(0, 2),
        ivec2(1, -1),
        ivec2(2, -3),
        ivec2(2, 2),
        ivec2(2, 3),
        ivec2(3, -3),
        ivec2(3, 0),
        ivec2(4, 0)),
    ivec2[16](
        ivec2(-4, -1),
        ivec2(-4, 2),
        ivec2(-3, 1),
        ivec2(-2, -3),
        ivec2(-2, -2),
        ivec2(-1, -1),
        ivec2(-1, 1),
        ivec2(-1, 3),
        ivec2(1, -4),
        ivec2(1, -3),
        ivec2(1, 0),
        ivec2(1, 3),
        ivec2(1, 4),
        ivec2(2, 0),
        ivec2(2, 1),
        ivec2(3, -2)),
    ivec2[16](
        ivec2(-4, -2),
        ivec2(-3, -1),
        ivec2(-2, 1),
        ivec2(-2, 3),
        ivec2(-1, 0),
        ivec2(0, -4),
        ivec2(0, -3),
        ivec2(0, -2),
        ivec2(0, 3),
        ivec2(0, 4),
        ivec2(1, 1),
        ivec2(2, -1),
        ivec2(2, 4),
        ivec2(3, 2),
        ivec2(4, -1),
        ivec2(4, 1))
    );

const vec2 poissonDisk[8] = vec2[](
    vec2(-0.5, -0.5),
    vec2( 0.5, -0.5),
    vec2(-0.5,  0.5),
    vec2( 0.5,  0.5),
    vec2(-0.25, -0.75),
    vec2( 0.25, -0.75),
    vec2(-0.75,  0.25),
    vec2( 0.75,  0.25)
);

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    ivec2 imageRes = rtxState.size; 
    ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);
    
    if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
        return; 

    // STAGE 1; Spatial reconstruction filtering
    ivec2 halfImageCoords = imageCoords / 2;

    vec3 result = vec3(0.0);
    float weightSum = 0.0;
    
    // Base sampling radius
    float radius = min(imageRes.x, imageRes.y) * 0.003;
    
    // Get center pixel values as reference
    vec4 centerColor = imageLoad(reflectionColor, halfImageCoords);
    if (centerColor.a == 0.0)
    {
		imageStore(filteredReflectionColor, imageCoords, vec4(0.0));
		return;
	}

    vec4 centerDirection = imageLoad(reflectionDirection, halfImageCoords);
    vec4 centerBrdf = imageLoad(reflectionPointBrdf, halfImageCoords);

    // Add center sample contribution
    float centerPdfInv = max(centerDirection.a, 0.001);
    float centerWeight = max(centerColor.a * centerPdfInv, 0.0);
    vec3 centerContrib = centerColor.rgb * centerWeight;
    result += centerContrib;
    weightSum += centerWeight;

    uint quadID = (imageCoords.y & 0x1) << 1 + (imageCoords.x & 0x1);
    float variance = 0.0;

    for (int i = 0; i < 16; ++i)
    {
		ivec2 offset = samplePattern[quadID][i];
		ivec2 neighborCoords = halfImageCoords + offset;

		vec4 neighborColor = imageLoad(reflectionColor, neighborCoords);
		if (neighborColor.a == 0.0)
            continue;
        
        float brdfWeight = neighborColor.a;
        float pdfInv = max(imageLoad(reflectionDirection, neighborCoords).a, 1e-5);
        
        // Combine BRDF weight with distance weight
        float weight = max(brdfWeight * pdfInv, 0.0);
        vec3 contrib = neighborColor.rgb * weight;
        vec3 diff = contrib - centerContrib;
        variance += dot(diff, diff);

        result += contrib;
        weightSum += weight;
    }

    // Sample with distance-based weights
//    for (int i = 0; i < 8; i++) {
//        ivec2 offset = ivec2(poissonDisk[i] * radius);
//        ivec2 neighborCoords = halfImageCoords + offset;
//
//        vec4 neighborColor = imageLoad(reflectionColor, neighborCoords);
//        if (neighborColor.a == 0.0)
//			continue;
//
//        float brdfWeight = neighborColor.a;
//        float pdfInv = max(imageLoad(reflectionDirection, neighborCoords).a, 1e-5);
//        
//        // Combine BRDF weight with distance weight
//        float weight = max(brdfWeight * pdfInv, 0.0);
//
//        result += neighborColor.rgb * weight;
//        weightSum += weight;
//    }

    // Normalize result
    if (weightSum > 1e-5) {
        result /= weightSum;
    } else {
        result = centerColor.rgb;
    }

    // temporal accumulation
    //float ratio = 1.0 / min(64.0, (1.0 + float(rtxState.frame)));
    //vec3 colPrev = imageLoad(filteredReflectionColor, imageCoords).rgb;
    //result = mix(colPrev, result, ratio);

    imageStore(filteredReflectionColor, imageCoords, vec4(result, sqrt(variance)));
}