#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_KHR_vulkan_glsl : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "globals.glsl"

layout(set = 0, binding = 0) uniform image2D reflectionColor;
layout(set = 0, binding = 1) uniform image2D reflectionDirection;
layout(set = 0, binding = 2) uniform image2D reflectionPointBrdf;
layout(set = 0, binding = 3) uniform image2D filteredReflectionColor;

const vec2 poissonDisk[8] = vec2[](
    vec2(-0.5, -0.5),
    vec2( 0.5, -0.5),
    vec2(-0.5,  0.5),
    vec2( 0.5,  0.5),
    vec2(-0.25, -0.75),
    vec2( 0.25, -0.75),
    vec2(-0.75,  0.25),
    vec2( 0.75,  0.25)
);

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    ivec2 imageRes = imageSize(reflectionColor); 
    ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);
    
    if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
        return; 

    vec3 result = vec3(0.0);
    float weightSum = 0.0;
    
    // Base sampling radius
    float radius = min(imageRes.x, imageRes.y) * 0.01;
    
    // Get center pixel values as reference
    vec4 centerColor = imageLoad(reflectionColor, imageCoords);
    vec4 centerDirection = imageLoad(reflectionDirection, imageCoords);
    vec4 centerBrdf = imageLoad(reflectionPointBrdf, imageCoords);

    // Sample with distance-based weights
    for (int i = 0; i < 8; i++) {
        ivec2 offset = ivec2(poissonDisk[i] * radius);
        ivec2 neighborCoords = imageCoords + offset;
        
        // Boundary check
        if (neighborCoords.x < 0 || neighborCoords.y < 0 || 
            neighborCoords.x >= imageRes.x || neighborCoords.y >= imageRes.y)
            continue;

        // Calculate distance-based weight
        float dist = length(vec2(offset));
        float distanceWeight = exp(-dist * dist / (2.0 * radius * radius));

        vec4 neighborColor = imageLoad(reflectionColor, neighborCoords);
        vec4 neighborDirection = imageLoad(reflectionDirection, neighborCoords);
        vec4 neighborBrdf = imageLoad(reflectionPointBrdf, neighborCoords);

        vec3 brdf = neighborBrdf.rgb;
        float pdf = max(neighborDirection.a, 0.001);
        
        // Combine BRDF weight with distance weight
        float weight = max(dot(brdf, vec3(1.0)) / pdf, 0.001) * distanceWeight;

        result += neighborColor.rgb * weight;
        weightSum += weight;
    }

    // Add center sample contribution
    float centerPdf = max(centerDirection.a, 0.001);
    float centerWeight = max(dot(centerBrdf.rgb, vec3(1.0)) / centerPdf, 0.001) * 1.0; // Center has full weight
    result += centerColor.rgb * centerWeight;
    weightSum += centerWeight;

    // Normalize result
    if (weightSum > 0.0) {
        result /= weightSum;
    } else {
        result = centerColor.rgb;
    }

    imageStore(filteredReflectionColor, imageCoords, vec4(result, 1.0));
//    imageStore(filteredReflectionColor, imageCoords, vec4(imageLoad(reflectionColor, imageCoords).xyz, 1.0));
}