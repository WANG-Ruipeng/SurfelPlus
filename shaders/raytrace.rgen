#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

//-------------------------------------------------------------------------------------------------
// Default ray generation
// - Will sample the pixel n-number of time: samples
// - Will jitter the camera in sub-pixel to do anitaliasing
//-------------------------------------------------------------------------------------------------


#include "binding.h"
#include "sampling.glsl"
#include "share.h"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;  // Scene BVH
layout(binding = 1, rgba32f, set = 0) uniform image2D image;              // In/Out rendering image
layout(binding = B_SCENE, set = 1) uniform UBOscene  // Scene info: camera matrices and more. See share.h
{
  Scene s;
}
ubo;

//------------------------------------
// Push constant from the application
//------------------------------------
layout(push_constant) uniform Constants
{
  int frame;    // Current frame
  int depth;    // Trace depth
  int samples;  // Number of samples per pixel
};

// Payload
layout(location = 0) rayPayloadNV PerRayData_raytrace prd;


//-------------------------------
// Ray generation
//-------------------------------
void main()
{
  vec3 hitValue = vec3(0);
  for(int smpl = 0; smpl < samples; ++smpl)
  {
    // Initialize the random number
    uint  seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, frame * samples + smpl);
    float r1   = radinv_fl(seed, 2);
    float r2   = radinv_fl(seed, 3);

    // Subpixel jitter: send the ray through a different position inside the pixel each time, to provide antialiasing.
    vec2 subpixel_jitter = (frame * samples + smpl) == 0 ? vec2(0.0f, 0.0f) : vec2(r1 - 0.5f, r2 - 0.5f);

    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5) + subpixel_jitter;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeNV.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    // Initialize ray information
    mat4  viewInverse = inverse(ubo.s.model);
    mat4  projInverse = inverse(ubo.s.projection);
    vec4  origin      = viewInverse * vec4(0, 0, 0, 1);
    vec4  target      = projInverse * vec4(d.x, d.y, 1, 1);
    vec4  direction   = viewInverse * vec4(normalize(target.xyz), 0);
    float Tmin        = 0.001;
    float Tmax        = 100000.0;

    // Payload
    prd.result     = vec3(0.f);
    prd.importance = vec3(1.f);
    prd.seed       = seed;
    prd.depth      = 0;
    prd.roughness  = 0;

    traceNV(topLevelAS,         // acceleration structure
            gl_RayFlagsNoneNV,  // rayFlags
            0xFF,               // cullMask
            0,                  // sbtRecordOffset
            0,                  // sbtRecordStride
            0,                  // missIndex
            origin.xyz,         // ray origin
            Tmin,               // ray min range
            direction.xyz,      // ray direction
            Tmax,               // ray max range
            0                   // payload layout(location = 0)
    );

    // Accumulating the result for this sample
    hitValue += prd.result;
  }

  // Average result
  hitValue = hitValue / samples;

  // Do accumulation over time
  if(frame > 0)
  {
    float a         = 1.0f / float(frame);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDNV.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(mix(old_color, hitValue, a), 1.f));
  }
  else
  {
    // First frame, replace value in the buffer
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitValue, 1.f));
  }
}
