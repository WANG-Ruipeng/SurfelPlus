/* Copyright (c) 2014-2018, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require            // This is about ray tracing
#extension GL_KHR_shader_subgroup_basic : require  // Special extensions to debug groups, warps, SM, ...
#extension GL_NV_shader_sm_builtins : require
#extension GL_EXT_scalar_block_layout : enable   // Align structure layout to scalar
#extension GL_EXT_nonuniform_qualifier : enable  // To access unsized descriptor arrays
#extension GL_ARB_shader_clock : enable          // Using clockARB

#include "../structures.h"

#include "globals.glsl"
#include "layouts.glsl"

layout(location = 0) rayPayloadEXT PtPayload prd;
layout(location = 1) rayPayloadEXT ShadowHitPayload shadow_payload;


layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};


#include "traceray_rtx.glsl"

#include "pathtrace.glsl"
#include "random.glsl"


void main()
{
  ivec2 imageRes    = rtxState.size;
  ivec2 imageCoords = ivec2(gl_LaunchIDEXT.xy);

  // Initialize the seed for the random number only once once
  uvec2 s    = pcg2d(imageCoords * int(clockARB()));
  uint  seed = s.x + s.y;
  //prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, rtxState.frame * rtxState.maxSamples);
  prd.seed = seed;

  vec3 pixelColor = vec3(0);
  for(int smpl = 0; smpl < rtxState.maxSamples; ++smpl)
  {
    pixelColor += samplePixel(imageCoords, imageRes);
  }

  pixelColor /= rtxState.maxSamples;

  // Do accumulation over time
  if(rtxState.frame > 0)
  {
    vec3 old_color  = imageLoad(resultImage, imageCoords).xyz;
    vec3 new_result = mix(old_color, pixelColor, 1.0f / float(rtxState.frame + 1));

    imageStore(resultImage, imageCoords, vec4(new_result, 1.f));
  }
  else
  {
    // First frame, replace the value in the buffer
    imageStore(resultImage, imageCoords, vec4(pixelColor, 1.f));
  }
}
