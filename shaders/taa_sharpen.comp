
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#extension GL_KHR_vulkan_glsl : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};



layout(set = 0, binding = eCamera,	scalar)		uniform _SceneCamera	{ SceneCamera sceneCamera; };

layout(set = 1, binding = 0) uniform image2D TAAColor1;
layout(set = 1, binding = 1) uniform image2D TAAColor2;
layout(set = 1, binding = 2) uniform sampler2D TAASampler1;
layout(set = 1, binding = 3) uniform sampler2D TAASampler2;

layout(set = 1, binding = 4) uniform image2D postTAAColor;

#include "globals.glsl"
#include "shaderUtils.glsl"

//#define sample_TAASampler(imageCoords) (rtxState.frame % 2 == 0 ? imageLoad(TAAColor2, imageCoords).rgb: imageLoad(TAAColor1, imageCoords).rgb)

#define sample_TAASampler(uv) (rtxState.frame % 2 == 0 ? texture(TAASampler2, uv).rgb: texture(TAASampler1, uv).rgb)


#define VALIDCOORDS(coords) (coords.x >= 0 && coords.x < 1.0f && coords.y >= 0 && coords.y < 1.0f)

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
	ivec2 imageRes = rtxState.size; 
    ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);

    if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
        return; 
	float offset = sceneCamera.jitter.z * sceneCamera.jitter.w;
	vec2 texSize = vec2(textureSize(TAASampler1, 0));
	vec2 leftUV = (vec2(imageCoords.x - offset, imageCoords.y) + 0.5) / texSize;
	vec2 rightUV = (vec2(imageCoords.x + offset, imageCoords.y) + 0.5) / texSize;
	vec2 upUV = (vec2(imageCoords.x, imageCoords.y - offset) + 0.5) / texSize;
	vec2 downUV = (vec2(imageCoords.x, imageCoords.y + offset) + 0.5) / texSize;

	vec2 uvCoords = (vec2(imageCoords) + vec2(0.5)) / texSize;

	vec3 center = sample_TAASampler(uvCoords);
	vec3 left = VALIDCOORDS(leftUV) ? sample_TAASampler(leftUV) : center;
	vec3 right = VALIDCOORDS(rightUV) ? sample_TAASampler(rightUV) : center;
	vec3 up = VALIDCOORDS(upUV) ? sample_TAASampler(upUV) : center;
	vec3 down = VALIDCOORDS(downUV) ? sample_TAASampler(downUV) : center;

	vec3 col = 5.0 * center - (left + right + up + down);
	
	imageStore(postTAAColor, imageCoords, vec4(clamp(col, 0, 1.0f), 1.0));
}